
leds_with_switches.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000012c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000593  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000511  00000000  00000000  0000074b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000020e  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002eb  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include<util/delay.h>
# define F_CPU 8000000UL
volatile unsigned char i=0,x=0;
int main(void)
{
	DDRA=0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRC=0;
  80:	14 ba       	out	0x14, r1	; 20
	PORTC=0xff;		// active all pins to be pull up
  82:	85 bb       	out	0x15, r24	; 21
	
	while (1)
	{
		if (read_bit(PINC,0)==0)
			PORTA=0xff;	// or using set func with for loop
  84:	2f ef       	ldi	r18, 0xFF	; 255
		if (read_bit(PINC,1)==0)
			PORTA=0;  // or using clear function with for loop
		
		if (read_bit(PINC,2)==0)
		{
			toggle_bit(PORTA,0);
  86:	91 e0       	ldi	r25, 0x01	; 1
	DDRC=0;
	PORTC=0xff;		// active all pins to be pull up
	
	while (1)
	{
		if (read_bit(PINC,0)==0)
  88:	98 9b       	sbis	0x13, 0	; 19
			PORTA=0xff;	// or using set func with for loop
  8a:	2b bb       	out	0x1b, r18	; 27
		
		if (read_bit(PINC,1)==0)
  8c:	99 9b       	sbis	0x13, 1	; 19
			PORTA=0;  // or using clear function with for loop
  8e:	1b ba       	out	0x1b, r1	; 27
		
		if (read_bit(PINC,2)==0)
  90:	9a 99       	sbic	0x13, 2	; 19
  92:	03 c0       	rjmp	.+6      	; 0x9a <main+0x1e>
		{
			toggle_bit(PORTA,0);
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	89 27       	eor	r24, r25
  98:	8b bb       	out	0x1b, r24	; 27
			
		}
			
		
		if (read_bit(PINC,3)==0)
  9a:	9b 99       	sbic	0x13, 3	; 19
  9c:	f5 cf       	rjmp	.-22     	; 0x88 <main+0xc>
		{
			x++;
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			PORTA=x;
  a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ac:	8b bb       	out	0x1b, r24	; 27
			while(read_bit(PINC,3)==0) {};	//polling
  ae:	9b 9b       	sbis	0x13, 3	; 19
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x32>
  b2:	ea cf       	rjmp	.-44     	; 0x88 <main+0xc>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
